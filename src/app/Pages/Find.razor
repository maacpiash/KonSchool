@page "/find"

@using System.Linq
@inject AppStateContainer State
@inject ILocationDataService locations
@inject NavigationManager NavManager

<EditForm Model="@formData" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />
	<FormValidator @ref="FormValidator" />
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="9" md="9" lg="6" xl="6">
			<MudCard Outlined="true">
				<MudCardHeader>
					<CardHeaderContent>
						<MudText Typo="Typo.h5">Student's Basic Information</MudText>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudSelect
						Label="Class"
						HelperText="Class intended for admission"
						@bind-Value="@formData.Class"
						Variant="Variant.Outlined"
						For="@(() => formData.Class)"
						Class="mt-3"
					>
						@for(int i = 6; i <= 10; i++)
						{
							<MudSelectItem Value="@i" />
						}
					</MudSelect>
					<MudTextField
						Label="Age"
						HelperText="Age of the student"
						@bind-Value="formData.Age"
						InputType="InputType.Number"
						For="@(() => formData.Age)"
						Variant="Variant.Outlined"
						Class="mt-3"
					/>
					<div class="d-flex">
						<MudRadioGroup T="bool" Required="true" @bind-SelectedOption="formData.IsFemale">
							<MudRadio Option="@true">Female</MudRadio>
							<MudRadio Option="@false">Male</MudRadio>
						</MudRadioGroup>
					</div>
					<MudSelect
						@bind-Value="formData.Occupation"
						Label="Occupation"
						HelperText="Occupation of the student's guardian"
						For="@(() => formData.Occupation)"
						Variant="Variant.Outlined"
						Class="mt-3"
					>
						@foreach(string option in Occupations.All)
						{
							<MudSelectItem Value="@option">@option</MudSelectItem>
						}
					</MudSelect>
				</MudCardContent>
			</MudCard>
			<MudCard Outlined="true">
				<MudCardHeader>
					<CardHeaderContent>
						<MudText Typo="Typo.h5">Student's Address</MudText>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudSelect
						@bind-Value="formData.Division"
						Label="Division"
						For="@(() => formData.Division)"
						Variant="Variant.Outlined"
						Class="mt-3"
					>
						@foreach(string option in locations.Divisions)
						{
							<MudSelectItem Value="@option">@option</MudSelectItem>
						}
					</MudSelect>
					<MudSelect
						@bind-Value="formData.District"
						Label="District"
						For="@(() => formData.District)"
						Variant="Variant.Outlined"
						Class="mt-3"
						Disabled="@(formData.Division is null)"
					>
						@if (formData.Division is not null && locations.Districts.ContainsKey(formData.Division))
							@foreach(string option in locations.Districts[formData.Division])
							{
								<MudSelectItem Value="@option">@option</MudSelectItem>
							}
					</MudSelect>
					<MudSelect
						@bind-Value="formData.Thana"
						Label="Thana/Upazilla"
						For="@(() => formData.Thana)"
						Variant="Variant.Outlined"
						Class="mt-3"
						Disabled="@(formData.District is null)"
					>
						@if (formData.Division is not null &&
							formData.District is not null &&
							locations.Thanas.ContainsKey(formData.District))
							@foreach(string option in locations.Thanas[formData.District])
							{
								<MudSelectItem Value="@option">@option</MudSelectItem>
							}
					</MudSelect>
					<MudSelect
						@bind-Value="formData.Union_Ward"
						Label="Union/Ward"
						For="@(() => formData.Union_Ward)"
						Variant="Variant.Outlined"
						Class="mt-3"
						Disabled=
							"@(formData.Division is null || formData.District is null || formData.Thana is null)"
					>
					@if (formData.Division is not null &&
						formData.District is not null &&
						formData.Thana is not null &&
						locations.Unions_Wards.ContainsKey(formData.District + formData.Thana))
						@foreach(string option in locations.Unions_Wards[formData.District + formData.Thana])
						{
							<MudSelectItem Value="@option">@option</MudSelectItem>
						}
					</MudSelect>
					@if (formData.District is not null &&
						formData.Thana is not null &&
						formData.Union_Ward is not null &&
						locations.LocalAreas.ContainsKey(formData.District + formData.Thana + formData.Union_Ward))
					{
						<MudText style="padding-top: 5px;">
							This Union/Ward includes
							@(locations.LocalAreas[formData.District + formData.Thana + formData.Union_Ward]
								.Aggregate("", (area, next) => area += $", {next}", text => text.Remove(0, 2)))
						</MudText>
					}
				</MudCardContent>
			</MudCard>
			@if (errors is not null && errors.Count() > 0)
			{
				<MudText Color="@Color.Error">
					<ValidationSummary />
				</MudText>
				<MudText>
					<small>
						If the problem persists, please reload the page.<br />
						This is a known bug, I'm trying to fix it!
					</small>
				</MudText>
			}
		</MudItem>
		<MudItem xs="12" sm="9" md="9" lg="6" xl="6">
			<MudCard Outlined="true">
				<MudCardHeader>
					<CardHeaderContent>
						<MudText Typo="Typo.h5">Comparison of criteria</MudText>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					@for (int i = 0; i < 5; i++)
					{
						<Comparison Criterion1="@criteria[i]" Criterion2="@criteria[i + 1]" Index="i" Values="values" />
					}
				</MudCardContent>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
						Show Schools
					</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
	</MudGrid>
</EditForm>

@code {
	private StudentFormModel formData = new();

	private FormValidator FormValidator;
	private Dictionary<string, List<string>> errors;

	private void OnValidSubmit()
	{
		var (div, dis, thana, uw) = formData;
		errors = new();

		if (!locations.Districts[div].Contains(dis))
		{
			errors.Add(nameof(dis), new List<string> { "Please select the District again." });
		}
		else if (!locations.Thanas[dis].Contains(thana) || !locations.Unions_Wards.ContainsKey(dis + thana))
		{
			errors.Add(nameof(thana), new List<string> { "Please select the Thana/Upazilla again." });
		}
		else if (!locations.Unions_Wards[dis + thana].Contains(uw))
		{
			errors.Add(nameof(uw), new List<string> { "Please select the Union/Ward again." });
		}

		if (errors.Count() > 0)
		{
			FormValidator.DisplayErrors(errors);
		}
		else
		{
			State.Merge(formData);
			NavManager.NavigateTo("/fuzzy-inputs");
		}
	}

	private int[] values = new int[5];

	private string[] degrees = new[]
	{
		"weakly",
		"more than weakly",
		"moderately",
		"more than moderately",
		"highly",
		"more than highly",
		"strongly",
		"more than strongly",
		"absolutely",
	};

	private string[] criteria = new[]
	{
		"Teacher-Student Ratio",
		"Male-Female Ratio",
		"Socio-Economic Status",
		"Location of School",
		"Age of School",
		"Average Age of Students",
	};

	public void OnSubmit()
	{
		State.FuzzyInputs = values;
		NavManager.NavigateTo("/schools");
	}
}

@page "/schools"
@using System.Linq;
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using KonSchool.Shared
@inject AppStateContainer State
@inject IConfiguration config
@inject IHttpClientFactory clientFactory

<div class="row container-fluid">
	<div class="col" style="max-width: 500px;">
		<MudCard Outlined="true">
			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">Inputs</MudText>
				</CardHeaderContent>
			</MudCardHeader>
			<MudCardContent>
				<MudText Typo="Typo.body1">Class: @State.Student.Class</MudText>
				<MudText Typo="Typo.body1">Age: @State.Student.Age</MudText>
				<MudText Typo="Typo.body1">Sex: @(State.Student.IsFemale ? "Female" : "Male")</MudText>
				<MudText Typo="Typo.body1">Occupation: @State.Student.Occupation</MudText>
				<MudText Typo="Typo.body1">Division: @State.Student.Address.Division</MudText>
				<MudText Typo="Typo.body1">District: @State.Student.Address.District</MudText>
				<MudText Typo="Typo.body1">Thana/Upazilla: @State.Student.Address.Thana</MudText>
				<MudText Typo="Typo.body1">Union/Ward: @State.Student.Address.Union_Ward</MudText>
			</MudCardContent>
		</MudCard>
	</div>
	<div class="col" style="max-width: 500px;">
		<MudCard Outlined="true">
			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">Weights of criteria</MudText>
				</CardHeaderContent>
			</MudCardHeader>
			<MudCardContent>
				@if (State.Weights is null)
				{
					<MudProgressCircular Color="Color.Default" Indeterminate="true" />
				}
				else if (GetWeightsError)
				{
					<MudText Color="@Color.Error">Could not calculate/get weights!</MudText>
				}
				else
				{
					<table class="table">
						<thead>
							<tr>
								<th>Criterion</th>
								<th>Weight</th>
							</tr>
						</thead>
						<tbody>
							@for (int i = 0; i < 6; i++)
							{
								<tr>
									<td>@criteria[i]</td>
									<td>@State.Weights[i].ToString("0.00000")</td>
								</tr>
							}
						</tbody>
					</table>
				}
			</MudCardContent>
		</MudCard>
	</div>
</div>

<div class="container-fluid" style="max-width: 2000px;">
	<MudCard Outlined="true">
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6">Schools</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent>
			@if (SchoolsNotLoaded)
			{
				<MudProgressCircular Color="Color.Default" Indeterminate="true" />
			}
			else if (GetWeightsError)
			{
				<MudText Color="@Color.Error">Could not fetch schools!</MudText>
			}
			else
			{
				<MudTable Items="@State.Alternatives" Hover="true" Breakpoint="Breakpoint.Sm">
					 <HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Street Address</MudTh>
						<MudTh>Union/Ward</MudTh>
						<MudTh>Thana/Upazilla</MudTh>
						<MudTh>District</MudTh>
						<MudTh>Mobile Number</MudTh>
						<MudTh>Type</MudTh>
						<MudTh>Level</MudTh>
						<MudTh>Compatibility Score</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>@context.Name</MudTd>
						<MudTd>@context.StreetAddr</MudTd>
						<MudTd>@context.Union_Ward</MudTd>
						<MudTd>@context.Thana</MudTd>
						<MudTd>@context.District</MudTd>
						<MudTd>@context.MobileNum</MudTd>
						<MudTd>@context.Type</MudTd>
						<MudTd>@context.Level</MudTd>
						<MudTd>@string.Format("{0:0.00}%", @context.FinalScore * 100)</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
				</MudTable>
			}
		</MudCardContent>
	</MudCard>
</div>

@code {
	public bool GetWeightsError { get; set; }

	public bool GetSchoolsError { get; set; }
	public bool SchoolsNotLoaded { get; set; } = true;

	private string[] criteria = new[]
	{
		"Teacher-Student Ratio",
		"Male-Female Ratio",
		"Socio-Economic Status",
		"Location of School",
		"Age of School",
		"Average Age of Students",
	};

	protected override async Task OnInitializedAsync()
	{
		string baseAddress = config.GetValue<string>("ApiEndpoints:fahp");
		string fuzzyInputs = State.FuzzyInputs.Aggregate("", (current, next) => current += $",{next}").Substring(1);

		var request = new HttpRequestMessage(HttpMethod.Get, baseAddress + fuzzyInputs);
		request.Headers.Add("Accept", "application/json");

		try
		{
			var response = await clientFactory.CreateClient().SendAsync(request);
			if (response.IsSuccessStatusCode)
			{
				using var responseStream = await response.Content.ReadAsStreamAsync();
				State.Weights = await JsonSerializer.DeserializeAsync<double[]>(responseStream);
			}
			else
			{
				GetWeightsError = true;
				State.Weights = Array.Empty<double>();
			}
		}
		catch (Exception e)
		{
			GetWeightsError = true;
			State.Weights = Array.Empty<double>();
			Console.Error.WriteLine(e.Message);
		}

		baseAddress = config.GetValue<string>("ApiEndpoints:schools");
		request = new HttpRequestMessage(HttpMethod.Get, baseAddress + State.BuildUriQuery());
		request.Headers.Add("Accept", "application/json");

		try
		{
			var response = await clientFactory.CreateClient().SendAsync(request);
			if (response.IsSuccessStatusCode)
			{
				using var responseStream = await response.Content.ReadAsStreamAsync();
				var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
				var schools = await JsonSerializer.DeserializeAsync<List<School>>(responseStream, options);
				State.Alternatives = schools;
				State.SetValues();
				foreach (School s in State.Alternatives)
					s.FinalScore = s.TSR * State.Weights[0] +
						s.MFR * State.Weights[1] +
						s.SES * State.Weights[2] +
						s.LOC * State.Weights[3] +
						s.OLD * State.Weights[4] +
						s.ADS * State.Weights[5];

				State.Alternatives = State.Alternatives.OrderByDescending(x => x.FinalScore).ToList();
				SchoolsNotLoaded = false;
			}
			else
			{
				GetSchoolsError = true;
				State.Alternatives = new();
			}
		}
		catch (Exception e)
		{
			GetSchoolsError = true;
			State.Alternatives = new();
			Console.Error.WriteLine(e.Message);
		}
	}
}
